 - Docker properties -
Docker desktop version: https://docs.docker.com/desktop/release-notes/
Docker engine version: 
  docker version

 - Dockerfile ex. 1-
FROM openjdk/node/python - pull image to our container
WORKDIR /app - we define folder in image, where we will copy files from PC
  this case if we write COPY . . - we place files to 'app' folder in image
COPY . . - copy files from PC to image; image has folder structure as in windows/linux
  first . - copy files from project root (where Dockerfile placed)
  second . - place all files to root of image
    COPY . /app - place all files to folder 'app' in image
RUN npm install - inside image we do the same as in PC (when we build image))
ENV PORT 4200 - rnvironment variable ith name 'PORT'
EXPOSE $PORT - which port application will use
VOLUME ["/app/data"] - create anonimous volume (will bw deleted after rm container)
CMD ["node","app.js"] - array of commands (when we run image)

 - Dockerfile ex.2 -
FROM ubuntu:16.04 - pull/install ubuntu tocontainer
RUN apt-get -y update - download latest versions
RUN apt-get -y install apache2 - instal apache web server (apache httpd)
RUN echo 'Hello World from Docker!' > /var/www/html/index.html - copy sentence to file
CMD ["/usr/sbin/apache2ctl", "-D","FOREGROUND"] - run server on background
EXPOSE 80

  - Dockerfile ex.3 -
FROM amazonlinux
RUN yum -y update
RUN yum -y install httpd
RUN echo 'Hello World from Docker!' > /var/www/html/index.html
CMD ["/usr/sbin/httpd","-D","FOREGROUND"]
EXPOSE 80

 - Dockerfile - cache -
When we generate new images we use the same artifacts in every build. Docker cahces these artifacts. We can reuse them.
FROM node
WORKDIR /app
COPY package.json /app
RUN npm install
COPY . .

 - Dockerfile - ingore -
We can define folders (from PC) which don't be included to image.
.dockerignore
  node_modules
  .git
  Dockerfile
  .idea

 - Dockerfile - Makefile -
Make install windows.
Create Makefile:
run:
  docker run --name app -d -p 8000:8080 -e USERNAME=USER app
then: make run

 - Dockerfile - environment variables -
If we use many -e during 'run image' we can get variables from .env file.
docker run --env-file ./props/.env

 - Dockerfile, image, container, run application -
Generate app-0.0.1.jar file via Gradle.
Create Dockerfile:
  FROM openjdk:17-jdk-alpine
  EXPOSE 8000/tcp // dosn't publish port, just documentation, need use -p
  ARG JAR_FILE=build/libs/*.jar
  COPY ./build/libs/app-0.0.1.jar app.jar (or /app.jar) // ADD is the same
  ENTRYPOINT ["java","-jar","/app.jar"] (or "app.jar")// slash is necessary
Run Docker.
Go to folder with Dockerfile.
Create image:
  docker build -t app .
    where
      -t - tag or name of image (latest by default)
      . - build from current position (docker will automatically find and run Dockerfile)
Run image:
  docker run --name app -d -p 8000:8080 -e USERNAME=USER app -v vol:/app/data
  where
    -d, dormant mode, run in the background
    -p - ports
    8000 - port on localhost
    8080 - post inside docker
    -e - environment variable
    -it - go to container and show console from inside container
    -i, --interactive - go to container and show console from inside container 
    -t, --tty - 
    -d, --detach - run container and go back to cmd
    --name - name of the container
    --rm - container automatically well be removed after stop
    --env-file - get environmet variables from .env file
    vol:/app/data
      vol - name of volume (will alive after rm container)
      /app/data - folder from where we will get data and store to volume
      (-v "C:\Users\johnDoe\project:/app" - mount volume from PC to docker volume)

Create docker image by Spring Boot + Gradle:
  gradle bootBuildImage

 - Docker image -
Contains from layers - tree of images that or image depends on.
  docker image inspects {imageId}

 - Commands -
docker - list of commands
docker version - version of docker engine
docker search {name} - find image by name in docker hub
docker images - list of images
docker image ls - list of images
docker container ls - list of contaiers
docker ps - (process status) running containers
docker ps -a - --all - all containers
docker attach {containerId} - ?
docker logs {containerId} - logs inside the container
docker start {containerId} - start already created container in detach mode
docker stop {containerId} - stop container
docker rm {containerId} - remove container
docker rm -f {containerId} - force close and remove container
docker container prune - delete all not running containers
docker image rm - remove image
docker rmi {imageId} - delete image
docker exec -it {containerId} bash / docker exec -it {containerId} /bin/bash - go inside container to bash console
  .exit - exit from cotainer, go back to PC
docker pull abc123 - pull docker image from hub.docker, abc123 - artifact, e.g. postresql
docker inspect abc123
  IPAddress
docker image inspects {imageId}
docker commit {containerId} {newImageName}:{newImageTag} - create image from container
docker save {imageId}:{imageTag} > {fileName}.tar - save image as file
docker load -i {fileName}.tar - unzip file to image

 - Docker - PostgresSQL -
docker run --name postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=postgres -d -p 5432:5432 -v C:\postgres_volume:/var/lib/postgresql/data postgres:15.5

 - Docker + Sprig Boot + PostgreSQL -
a) spring on localhost, postgres on docker
run postgres conatiner (see. #Run PostgresSQL:)
add to application.properties:
  spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
b) spring on docker, postgres on docker
run postgres conatiner (see. #Run PostgresSQL:)
docker inspect postgres
  copy value from 'IPAddress' (e.g. 172.17.0.2)
add to application.properties:
  spring.datasource.url=jdbc:postgresql://172.17.0.2:5432/postgres
create Dockerfile
create image (docker build -t app .)
run container (docker run -d -p 8000:8080 app)
c) spring + postgres by docker compose
create Dockerfile
create docker-compose.yml:
-
version: '3.8'

services:
  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:54322

  app:
    build: .
    image: app
    container_name: app
    depends_on:
      - postgres # link to service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    ports:
      - 8080:8080
-
application.properties:
-
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
-
docker compose -f docker-compose.yaml pull
docker compose -f docker-compose.yaml pull up -d

 - Docker hub -
Push image to docker hub:
create access token in https://hub.docker.com
docker login -u amilosh
Create repository in docker hub: app
docker tag local-image:tagname new-repo:tagname (docker tag app:latest amilosh/app:latest)
docker push new-repo:tagname (docker push amilosh/app:latest)

Credentials to docker hub:
  ~\.docker\config.json
  a)
  {
      "auths": {
          "https://index.docker.io/v1/": {}
      },
      "credsStore": "desktop.exe",
      "currentContext": "default"
  }
    Creds are stored via Docker Desktop. Just log in to Docker Desktop.
  b)
  {
      "auths": {
          "https://index.docker.io/v1/": {
              "auth": "dXNlcm5hbWU6cGFzc3dvcmQ="
          }
      },
      "credsStore": "desktop.exe",
      "currentContext": "default"
  }
    dXNlcm5hbWU6cGFzc3dvcmQ= - Base64 encoded text "username:password"

 - Remote: AWS EC2 Amazon Linux -
Log in to Linux as root user
sudo yum install docker
sudo systemctl start docker.service && sudo systemctl enable docker.service
sudo systemctl status docker.service
docker -v
docker pull amilosh/app:latest
docker run --name app -d -p 80:8080 amilosh/app:latest
go to EC2
  copy value from 'Public IPv4 DNS'
http://ec2-51-20-42-196.eu-north-1.compute.amazonaws.com/hello

 - AWS ECR -
docker build -t denis:v1 .
aws ecr get-login --no-include-email --region=ca-central-1 
docker tag  denis:v1  12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:latest
docker push 12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:lastest
docker pull 12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:latest